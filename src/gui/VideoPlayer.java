/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import arboles.Tree;
import arboles.TreeSong;
import com.sun.glass.events.KeyEvent;
import dominio.VideoFile;
import enumerators.PlayerRepeatStatus;
import errors.MusicPathError;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.dnd.DropTarget;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.RoundRectangle2D;
import java.io.File;
import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.embed.swing.JFXPanel;
import javafx.scene.media.MediaPlayer;
import javafx.util.Duration;
import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.apache.commons.io.FilenameUtils;
import repositorio.DragListener;
import repositorio.VideoPlayerRepository;
import utilities.RoundedBorder;

/**
 *
 * @author Ellet
 */
public class VideoPlayer extends javax.swing.JFrame {
    private VideoPlayerRepository videoRepository = new VideoPlayerRepository();
    private JFXPanel playerPanel = new JFXPanel();
    private MediaPlayer player;
    private DefaultListModel list = new DefaultListModel();
    public static int currentSongIndex = -1;
    private int mouseX;
    private int mouseY;
    private Tree tree = new Tree();
    /**
     * Creates new form Video
     */
    public VideoPlayer() {
        initComponents();
        playList.setModel(list);
        this.setLocationRelativeTo(null);
        this.setShape(new RoundRectangle2D.Double(0,0, getWidth(), getHeight(), 80, 80));
        playerPanelProperties();
        dialogProperties();
        fileChooserProperties();
        videoRepository.setDimension(viewPanel.getPreferredSize());
        addDataListenerToListModel();
        lbVolume.setText(Integer.toString(sldVolume.getValue())  + " %");
        sldVolume.addChangeListener(change);
        connectToDrop();
        buttonsShapes();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileDialog = new javax.swing.JDialog();
        filePanel = new javax.swing.JPanel();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        playList = new javax.swing.JList();
        btAdd = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        viewPanel = new javax.swing.JPanel();
        btNext = new javax.swing.JButton();
        btPrevious = new javax.swing.JButton();
        lbVolume = new javax.swing.JLabel();
        sldVolume = new javax.swing.JSlider();
        btRepeatMode = new javax.swing.JToggleButton();
        btDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lbBar = new javax.swing.JLabel();
        btMinimize = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        btListarArbol = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        fileDialog.setSize(new java.awt.Dimension(0, 0));

        fileChooser.setDialogTitle("SELECCIONE MUSICA");
        fileChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fileChooser.setDoubleBuffered(true);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fileDialogLayout = new javax.swing.GroupLayout(fileDialog.getContentPane());
        fileDialog.getContentPane().setLayout(fileDialogLayout);
        fileDialogLayout.setHorizontalGroup(
            fileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fileDialogLayout.setVerticalGroup(
            fileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        fileDialog.getAccessibleContext().setAccessibleParent(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        playList.setBackground(new java.awt.Color(115, 50, 229));
        playList.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        playList.setForeground(new java.awt.Color(255, 255, 255));
        playList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playList.setDragEnabled(true);
        playList.setSelectionBackground(new java.awt.Color(86, 164, 215));
        playList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        playList.setValueIsAdjusting(true);
        playList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playListMouseClicked(evt);
            }
        });
        playList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                playListKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                playListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(playList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 240, 240));

        btAdd.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btAdd.setForeground(new java.awt.Color(255, 255, 255));
        btAdd.setText("AÃ‘ADIR");
        btAdd.setContentAreaFilled(false);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });
        getContentPane().add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, -1, -1));

        playButton.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        playButton.setForeground(new java.awt.Color(255, 255, 255));
        playButton.setText("PLAY");
        playButton.setContentAreaFilled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        getContentPane().add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 70, 46));

        stopButton.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        stopButton.setForeground(new java.awt.Color(255, 255, 255));
        stopButton.setText("STOP");
        stopButton.setContentAreaFilled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(stopButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 70, 46));

        viewPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewPanel.setOpaque(false);

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        getContentPane().add(viewPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 490, 280));

        btNext.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btNext.setForeground(new java.awt.Color(255, 255, 255));
        btNext.setText(">>");
        btNext.setContentAreaFilled(false);
        btNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNextActionPerformed(evt);
            }
        });
        getContentPane().add(btNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 360, 50, -1));

        btPrevious.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btPrevious.setForeground(new java.awt.Color(255, 255, 255));
        btPrevious.setText("<<");
        btPrevious.setContentAreaFilled(false);
        btPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPreviousActionPerformed(evt);
            }
        });
        getContentPane().add(btPrevious, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 50, -1));

        lbVolume.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lbVolume, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 380, 40, 20));

        sldVolume.setToolTipText("Volumen");
        sldVolume.setOpaque(false);
        getContentPane().add(sldVolume, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, 200, -1));

        btRepeatMode.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btRepeatMode.setForeground(new java.awt.Color(255, 255, 255));
        btRepeatMode.setText("REPEAT ALL");
        btRepeatMode.setContentAreaFilled(false);
        btRepeatMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRepeatModeActionPerformed(evt);
            }
        });
        getContentPane().add(btRepeatMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 360, -1, -1));

        btDelete.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btDelete.setForeground(new java.awt.Color(255, 255, 255));
        btDelete.setText("ELIMINAR");
        btDelete.setContentAreaFilled(false);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 300, -1, -1));

        jPanel1.setBackground(new java.awt.Color(115, 50, 229));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbBar.setBackground(new java.awt.Color(115, 50, 229));
        lbBar.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        lbBar.setForeground(new java.awt.Color(255, 255, 255));
        lbBar.setText("          SDM - VIDEO PLAYER");
        jPanel1.add(lbBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 30));

        btMinimize.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btMinimize.setForeground(new java.awt.Color(255, 255, 255));
        btMinimize.setText("_");
        btMinimize.setContentAreaFilled(false);
        btMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMinimizeActionPerformed(evt);
            }
        });
        jPanel1.add(btMinimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 50, 30));

        btClose.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btClose.setForeground(new java.awt.Color(255, 255, 255));
        btClose.setText("X");
        btClose.setContentAreaFilled(false);
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 0, 50, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 30));

        btListarArbol.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btListarArbol.setForeground(new java.awt.Color(255, 255, 255));
        btListarArbol.setText("LISTAR ARBOL");
        btListarArbol.setContentAreaFilled(false);
        btListarArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListarArbolActionPerformed(evt);
            }
        });
        getContentPane().add(btListarArbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 340, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FondoReproductorMejorado.jpg"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(770, 390));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 770, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        JFileChooser fileSelector = (JFileChooser) evt.getSource();
        String command = evt.getActionCommand();
        try {
            fileSelection(fileSelector,command);
        } catch (MusicPathError ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_fileChooserActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if(playList.getModel().getSize() > 0 && playList.getSelectedIndex() != -1){
            controlReproduccion();
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if(player != null){
            if(playList.getModel().getSize() > 0 && playList.getSelectedIndex() != -1){
                player.stop();
                playList.setSelectedIndex(-1);
                playList.clearSelection();
            }
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void playListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playListMouseClicked
        playListSongSelection(evt);
    }//GEN-LAST:event_playListMouseClicked

    private void btNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextActionPerformed
        if(player != null && list.size() > 0 && currentSongIndex > -1){
            nextSong();
        }
    }//GEN-LAST:event_btNextActionPerformed

    private void btPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousActionPerformed
        // TODO add your handling code here:
        if(player != null && list.size() > 0 && currentSongIndex > -1){
            previousSong();
        }
    }//GEN-LAST:event_btPreviousActionPerformed

    private void btRepeatModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRepeatModeActionPerformed
        // TODO add your handling code here:
        if(btRepeatMode.isSelected()){
            videoRepository.setPlayerRepeatStatus(PlayerRepeatStatus.ONE);
            btRepeatMode.setText("REPEAT ONE");
        }
        else{
            videoRepository.setPlayerRepeatStatus(PlayerRepeatStatus.ALL);
            btRepeatMode.setText("REPEAT ALL");
        }
    }//GEN-LAST:event_btRepeatModeActionPerformed

    private void playListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playListKeyReleased
        
    }//GEN-LAST:event_playListKeyReleased

    private void playListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playListKeyPressed
        int index = playList.getSelectedIndex();
        if(!playList.isSelectionEmpty()){
            if(evt.getKeyCode() == KeyEvent.VK_DELETE){
                list.remove(index);
                if(currentSongIndex == index){
                    player.stop();
                }
            }
        }
    }//GEN-LAST:event_playListKeyPressed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        fileDialog.setVisible(true);
    }//GEN-LAST:event_btAddActionPerformed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        int x = evt.getXOnScreen() - mouseX;
        int y = evt.getYOnScreen() - mouseY;
        this.setLocation(x,y);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btCloseActionPerformed

    private void btMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMinimizeActionPerformed
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_btMinimizeActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        int index = playList.getSelectedIndex();
        if(!playList.isSelectionEmpty()){
                list.remove(index);
                if(currentSongIndex == index){
                    player.stop();
                }
        }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btListarArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListarArbolActionPerformed
        if(tree.getRaiz() != null){
            System.out.println("----------RECORRIDO PREORDEN----------");
            tree.preorden(tree.getRaiz());
            System.out.println();
            System.out.println("----------RECORRIDO INORDEN----------");
            tree.inorden(tree.getRaiz());
            System.out.println();
            System.out.println("----------RECORRIDO POSTORDEN----------");
            tree.postorden(tree.getRaiz());
        }
        
    }//GEN-LAST:event_btListarArbolActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VideoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VideoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VideoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VideoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VideoPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btClose;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btListarArbol;
    private javax.swing.JButton btMinimize;
    private javax.swing.JButton btNext;
    private javax.swing.JButton btPrevious;
    private javax.swing.JToggleButton btRepeatMode;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JDialog fileDialog;
    private javax.swing.JPanel filePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbBar;
    private javax.swing.JLabel lbVolume;
    private javax.swing.JButton playButton;
    public static javax.swing.JList playList;
    private javax.swing.JSlider sldVolume;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables

    private void dialogProperties(){
        fileDialog.setLocationRelativeTo(this);
        fileDialog.setSize(filePanel.getPreferredSize());
        fileDialog.setLocationRelativeTo(null);
    }
    
    private void fileChooserProperties(){
        fileChooser.setMultiSelectionEnabled(true);
    }
    
    private void playerPanelProperties(){
        playerPanel.setSize(viewPanel.getPreferredSize());
        viewPanel.add(playerPanel);        
    }
    
    private void play(VideoFile video){
        VideoFile videoFile = new VideoFile(video.getFile());
        playerPanel.setScene(videoRepository.startScene(videoFile));
        player = videoRepository.getPlayer();
        player.play();
        setVolume();
        currentSongIndex = playList.getSelectedIndex();
    }
    
    private void playAnotherSong(VideoFile video){
        VideoFile videoFile = new VideoFile(video.getFile());
        playerPanel.setScene(videoRepository.setSongOnPlayer(videoFile));
        player = videoRepository.getPlayer();
        player.play();
        setVolume();
        currentSongIndex = playList.getSelectedIndex();
    }

    private void fileSelection(JFileChooser fileSelector, String command) throws MusicPathError {
        if(command.equals(JFileChooser.APPROVE_SELECTION)){
            File [] files = fileSelector.getSelectedFiles();
            for(File file : files){
                if(FilenameUtils.getExtension(file.getName()).equals("mp4") ||
                        FilenameUtils.getExtension(file.getName()).equals("mp3")){
                   VideoFile video = new VideoFile(file);
                   video.setTitle(file.getName());
                   TreeSong treeSong = new TreeSong(video);
                   tree.InicializarNodo(treeSong);
                   list.addElement(video);
                }
            }
            playList.setModel(list);
            fileDialog.setVisible(false);
        }
        else{
            if(command.equals(JFileChooser.CANCEL_SELECTION)){
                fileDialog.setVisible(false);
            }
        }
    }
    
    
    private void playListSongSelection(MouseEvent evt){
        if(evt.getButton() == MouseEvent.BUTTON1){
            VideoFile video = (VideoFile) playList.getSelectedValue();
            int index = playList.locationToIndex(evt.getPoint());
            if(index > -1 && playList.getCellBounds(index, index).contains(evt.getPoint())){
                if(evt.getClickCount() == 2){
                    playList.setSelectedIndex(index);   
                    if(playList.getModel().getSize() > 0 && playList.getSelectedIndex() != -1){
                        if(player == null){
                            play(video);
                            currentSongIndex = playList.getSelectedIndex();
                            videoRepository.setCurrentSongIndex(currentSongIndex);
                            setPlayIcon();
                        }
                        else{
                            player.stop();
                            playAnotherSong(video);  
                            currentSongIndex = playList.getSelectedIndex();
                            videoRepository.setCurrentSongIndex(currentSongIndex);
                            setPlayIcon();
                        }
                    } 
                }
            }
            else{
                playList.setSelectedIndex(-1);
                playList.clearSelection();
            }
        }
    }   
    
    public void setVolume(){
        double t = (double) sldVolume.getValue() / 100;
        t = new BigDecimal(t).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        player.setVolume(t);
    }
    
    ChangeListener change = new ChangeListener(){
        @Override
        public void stateChanged(ChangeEvent e) {
            if(player != null){
                setVolume();
                lbVolume.setText(Integer.toString(sldVolume.getValue()) + " %");
                
            }
        }
        
    };
       
    
    public void addDataListenerToListModel(){
        list.addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                List<VideoFile> playList = new ArrayList<VideoFile>();
                for(int c = 0; c < list.size(); c++){
                    playList.add((VideoFile) list.get(c));
                }
                videoRepository.setPlayList(playList);
                
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                List<VideoFile> playList = new ArrayList<VideoFile>();
                for(int c = 0; c < list.size(); c++){
                    playList.add((VideoFile) list.get(c));
                }
                videoRepository.setPlayList(playList);
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                
                
            }
        });
    }
    
    private void controlReproduccion(){
        if(player.getStatus() == MediaPlayer.Status.PLAYING){
            player.pause();
            setPauseIcon();
        }
        if(player.getStatus() == MediaPlayer.Status.PAUSED){
            player.play();
            setPlayIcon();
        }
    }
    
    private void setPlayIcon(){
        playButton.setText("PLAY");
    }
    
    private void setPauseIcon(){
        playButton.setText("PAUSE");
    }
    
    private void connectToDrop(){
        DragListener drag= new DragListener(list);
        DropTarget dropTarget = new DropTarget(this,drag);   
    }
    
    public void nextSong(){
        if(!(currentSongIndex == playList.getLastVisibleIndex())){
            player.stop();
            VideoFile video =(VideoFile) list.get(currentSongIndex + 1);
            playList.setSelectedIndex(currentSongIndex + 1);
            playAnotherSong(video);
            
        }
        else{
            if(videoRepository.getPlayerRepeatStatus() == PlayerRepeatStatus.ALL){
                player.stop();
                VideoFile video =(VideoFile) list.get(0);
                playList.setSelectedIndex(0);
                playAnotherSong(video);
            }
        }
    }
    
    public void previousSong(){
        if(!(currentSongIndex == playList.getFirstVisibleIndex())){
            player.stop();
            VideoFile video =(VideoFile) list.get(currentSongIndex - 1);
            playList.setSelectedIndex(currentSongIndex -1);
            playAnotherSong(video);
        }
        else{
            if(videoRepository.getPlayerRepeatStatus() == PlayerRepeatStatus.ALL){
                player.stop();
                VideoFile video =(VideoFile) list.get(playList.getLastVisibleIndex());
                playList.setSelectedIndex(playList.getLastVisibleIndex());
                playAnotherSong(video);
            }
        }
    }
    
    
    
    public void buttonsShapes(){
        btRepeatMode.setBorder(new RoundedBorder(8));
        playButton.setBorder(new RoundedBorder(8));
        stopButton.setBorder(new RoundedBorder(8));
        btNext.setBorder(new RoundedBorder(8));
        btPrevious.setBorder(new RoundedBorder(8));
        btAdd.setBorder(new RoundedBorder(8));
        btDelete.setBorder(new RoundedBorder(8));  
        btClose.setBorder(new RoundedBorder(8));  
        btMinimize.setBorder(new RoundedBorder(8));  
        btListarArbol.setBorder(new RoundedBorder(8));
        
    }
    
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("resources/purpleSonaSI.png"));
        return retValue;
    }
    
    
   
    
   
    
}

